int                 shift INT:type_specifier
int              reduce type_specifier:declaration_specifiers
int a                 shift IDENTIFIER:direct_declarator
int a              reduce direct_declarator:declarator
int a              reduce declarator:init_declarator
int a 		reduce init_declarator:init_declarator_list
int a              reduce init_declarator_list:declaration
int a ;                 ;:term3 in declaration
             reduce declaration:external_declaration
		reduce external_declaration:translation_unit
char                 shift CHAR:type_specifier
char              reduce type_specifier:declaration_specifiers
char *          shift *:term1 in pointer
char * str                 shift IDENTIFIER:direct_declarator
char * str 		reduce direct_declarator:declarator
char * str              reduce declarator:init_declarator
char * str 		reduce init_declarator:init_declarator_list
char * str              reduce init_declarator_list:declaration
char * str ;                 ;:term3 in declaration
             reduce declaration:external_declaration
             reduce external_declaration:translation_unit
float                 shift FLOAT:type_specifier
float              reduce type_specifier:declaration_specifiers
float f                 shift IDENTIFIER:direct_declarator
float f [          shift [:term2 in direct_declarator
float f [ 10                 shift CONSTANT:primary_expression
float f [ 10 		reduce primary_expression:postfix_expression
float f [ 10              reduce postfix_expression:unary_expression
float f [ 10              reduce unary_expression:cast_expression
float f [ 10              reduce cast_expression:multiplicative_expression
float f [ 10              reduce multiplicative_expression:additive_expression
float f [ 10              reduce additive_expression:shift_expression
float f [ 10              reduce shift_expression:relational_expression
float f [ 10              reduce relational_expression:equality_expression
float f [ 10              reduce equality_expression:and_expression
float f [ 10              reduce and_expression:exclusive_or_expression
float f [ 10              reduce exclusive_or_expression:inclusive_or_expression
float f [ 10              reduce inclusive_or_expression:logical_and_expression
float f [ 10              reduce logical_and_expression:logical_or_expression
float f [ 10              reduce logical_or_expression:conditional_expression
float f [ 10 		reduce conditional_expression:assignment_expression
float f [ 10              reduce assignment_expression:direct_declarator
float f [ 10 ]          shift [:term2 in direct_declarator
float f [ 10 ]              reduce direct_declarator:declarator
float f [ 10 ]              reduce declarator:init_declarator
float f [ 10 ] 		reduce init_declarator:init_declarator_list
float f [ 10 ]              reduce init_declarator_list:declaration
float f [ 10 ] ;                 ;:term3 in declaration
             reduce declaration:external_declaration
             reduce external_declaration:translation_unit
void                 shift VOID:type_specifier
void              reduce type_specifier:declaration_specifiers
void main                 shift IDENTIFIER:direct_declarator
void main (          shift (:term2 in direct_declarator
void main ( int                 shift INT:type_specifier
void main ( int              reduce type_specifier:declaration_specifiers
void main ( int argc                 shift IDENTIFIER:direct_declarator
void main ( int argc              reduce direct_declarator:declarator
void main ( int argc              reduce declarator:parameter_declaration
void main ( int argc              reduce  parameter_declaration:parameter_list
void main ( int argc ,          shift ,:term2 in parameter_list
void main ( int argc , char                 shift CHAR:type_specifier
void main ( int argc , char              reduce type_specifier:declaration_specifiers
void main ( int argc , char *          shift *:term1 in pointer
void main ( int argc , char * argv                 shift IDENTIFIER:direct_declarator
void main ( int argc , char * argv 		reduce direct_declarator:declarator
void main ( int argc , char * argv              reduce declarator:parameter_declaration
void main ( int argc , char * argv              reduce  parameter_declaration:parameter_list
void main ( int argc , char * argv              reduce parameter_list:parameter_type_list
void main ( int argc , char * argv              reduce parameter_type_list:direct_declarator
void main ( int argc , char * argv )          shift ):term4 in direct_declarator
void main ( int argc , char * argv )              reduce direct_declarator:declarator
void main ( int argc , char * argv ) {          {:term1 in compound_statement
char                 shift CHAR:type_specifier
char              reduce type_specifier:declaration_specifiers
char c                 shift IDENTIFIER:direct_declarator
char c              reduce direct_declarator:declarator
char c              reduce declarator:init_declarator
char c 		reduce init_declarator:init_declarator_list
char c              reduce init_declarator_list:declaration
char c ;                 ;:term3 in declaration
             reduce block_item:block_item
		reduce block_item:block_item_list
int                 shift INT:type_specifier
int              reduce type_specifier:declaration_specifiers
int d                 shift IDENTIFIER:direct_declarator
int d              reduce direct_declarator:declarator
int d              reduce declarator:init_declarator
int d 		reduce init_declarator:init_declarator_list
int d              reduce init_declarator_list:declaration
int d ;                 ;:term3 in declaration
             reduce block_item:block_item
             reduce block_item:block_item_list
int                 shift INT:type_specifier
int              reduce type_specifier:declaration_specifiers
int i                 shift IDENTIFIER:direct_declarator
int i              reduce direct_declarator:declarator
int i              reduce declarator:init_declarator
int i =          =:term2 in init_declarator_list
int i = 0                 shift CONSTANT:primary_expression
int i = 0 		reduce primary_expression:postfix_expression
int i = 0              reduce postfix_expression:unary_expression
int i = 0              reduce unary_expression:cast_expression
int i = 0              reduce cast_expression:multiplicative_expression
int i = 0              reduce multiplicative_expression:additive_expression
int i = 0              reduce additive_expression:shift_expression
int i = 0              reduce shift_expression:relational_expression
int i = 0              reduce relational_expression:equality_expression
int i = 0              reduce equality_expression:and_expression
int i = 0              reduce and_expression:exclusive_or_expression
int i = 0              reduce exclusive_or_expression:inclusive_or_expression
int i = 0              reduce inclusive_or_expression:logical_and_expression
int i = 0              reduce logical_and_expression:logical_or_expression
int i = 0              reduce logical_or_expression:conditional_expression
int i = 0 		reduce conditional_expression:assignment_expression
int i = 0              reduce  assignment_expression:initializer
int i = 0              reduce initializer:init_declarator
int i = 0 		reduce init_declarator:init_declarator_list
int i = 0              reduce init_declarator_list:declaration
int i = 0 ;                 ;:term3 in declaration
             reduce block_item:block_item
             reduce block_item:block_item_list
for                 shift FOR:iteration_statement
for (                 shift (:term2 in iteration_statement
for ( i 		shift IDENTIFIER:primary_expression
for ( i 		reduce primary_expression:postfix_expression
for ( i              reduce postfix_expression:unary_expression
for ( i              reduce unary_expression:assignment_expression
for ( i =                 =:term 1 in assignment_operator
for ( i =              reduce assignment_operator:assignment_expression
for ( i = 0                 shift CONSTANT:primary_expression
for ( i = 0 		reduce primary_expression:postfix_expression
for ( i = 0              reduce postfix_expression:unary_expression
for ( i = 0              reduce unary_expression:cast_expression
for ( i = 0              reduce cast_expression:multiplicative_expression
for ( i = 0              reduce multiplicative_expression:additive_expression
for ( i = 0              reduce additive_expression:shift_expression
for ( i = 0              reduce shift_expression:relational_expression
for ( i = 0              reduce relational_expression:equality_expression
for ( i = 0              reduce equality_expression:and_expression
for ( i = 0              reduce and_expression:exclusive_or_expression
for ( i = 0              reduce exclusive_or_expression:inclusive_or_expression
for ( i = 0              reduce inclusive_or_expression:logical_and_expression
for ( i = 0              reduce logical_and_expression:logical_or_expression
for ( i = 0              reduce logical_or_expression:conditional_expression
for ( i = 0 		reduce conditional_expression:assignment_expression
for ( i = 0              reduce assignment_expression:expression
for ( i = 0 		reduce expression:expression_statement
for ( i = 0 ;          ;:term2 in expression_statement
             reduce expression_statement:iteration_statement
i 		shift IDENTIFIER:primary_expression
i 		reduce primary_expression:postfix_expression
i              reduce postfix_expression:unary_expression
i              reduce unary_expression:cast_expression
i              reduce cast_expression:multiplicative_expression
i              reduce multiplicative_expression:additive_expression
i              reduce additive_expression:shift_expression
i              reduce shift_expression:relational_expression
i <=              shift LE_OP in relational_expression
i <= 10                 shift CONSTANT:primary_expression
i <= 10 		reduce primary_expression:postfix_expression
i <= 10              reduce postfix_expression:unary_expression
i <= 10              reduce unary_expression:cast_expression
i <= 10              reduce cast_expression:multiplicative_expression
i <= 10              reduce multiplicative_expression:additive_expression
i <= 10              reduce additive_expression:shift_expression
i <= 10              reduce shift_expression:relational_expression
i <= 10              reduce relational_expression:equality_expression
i <= 10              reduce equality_expression:and_expression
i <= 10              reduce and_expression:exclusive_or_expression
i <= 10              reduce exclusive_or_expression:inclusive_or_expression
i <= 10              reduce inclusive_or_expression:logical_and_expression
i <= 10              reduce logical_and_expression:logical_or_expression
i <= 10              reduce logical_or_expression:conditional_expression
i <= 10 		reduce conditional_expression:assignment_expression
i <= 10              reduce assignment_expression:expression
i <= 10 		reduce expression:expression_statement
i <= 10 ;          ;:term2 in expression_statement
             reduce expression_statement:iteration_statement
i 		shift IDENTIFIER:primary_expression
i 		reduce primary_expression:postfix_expression
i ++                 shift INC_OP:postfix_expression
i ++              reduce postfix_expression:unary_expression
i ++              reduce unary_expression:cast_expression
i ++              reduce cast_expression:multiplicative_expression
i ++              reduce multiplicative_expression:additive_expression
i ++              reduce additive_expression:shift_expression
i ++              reduce shift_expression:relational_expression
i ++              reduce relational_expression:equality_expression
i ++              reduce equality_expression:and_expression
i ++              reduce and_expression:exclusive_or_expression
i ++              reduce exclusive_or_expression:inclusive_or_expression
i ++              reduce inclusive_or_expression:logical_and_expression
i ++              reduce logical_and_expression:logical_or_expression
i ++              reduce logical_or_expression:conditional_expression
i ++ 		reduce conditional_expression:assignment_expression
i ++              reduce assignment_expression:expression
i ++              reduce expression:iteration_statement
i ++ )                 shift ):term in iteration_statement
i ++ ) {          {:term1 in compound_statement
i 		shift IDENTIFIER:primary_expression
i 		reduce primary_expression:postfix_expression
i              reduce postfix_expression:unary_expression
i              reduce unary_expression:assignment_expression
i +=                 ADD_ASSIGN in assignment_operator
i +=              reduce assignment_operator:assignment_expression
i += 1                 shift CONSTANT:primary_expression
i += 1 		reduce primary_expression:postfix_expression
i += 1              reduce postfix_expression:unary_expression
i += 1              reduce unary_expression:cast_expression
i += 1              reduce cast_expression:multiplicative_expression
i += 1              reduce multiplicative_expression:additive_expression
i += 1              reduce additive_expression:shift_expression
i += 1              reduce shift_expression:relational_expression
i += 1              reduce relational_expression:equality_expression
i += 1              reduce equality_expression:and_expression
i += 1              reduce and_expression:exclusive_or_expression
i += 1              reduce exclusive_or_expression:inclusive_or_expression
i += 1              reduce inclusive_or_expression:logical_and_expression
i += 1              reduce logical_and_expression:logical_or_expression
i += 1              reduce logical_or_expression:conditional_expression
i += 1 		reduce conditional_expression:assignment_expression
i += 1              reduce assignment_expression:expression
i += 1 		reduce expression:expression_statement
i += 1 ;          ;:term2 in expression_statement
             reduce expression_statement:statement
             reduce statement:block_item
		reduce block_item:block_item_list
		reduce block_item_list:compound_statement
}          }:term2 in compound_statement
             reduce compound_statement:statement
             reduce statement:iteration_statement
             reduce iteration_statement:statement
             reduce statement:block_item
             reduce block_item:block_item_list
return                shift RETURN in jump_statement
return ;                shift ;:term2 in jump_statement
return ;              reduce jump_statement:statement
return ;              reduce statement:block_item
return ;              reduce block_item:block_item_list
return ; 		reduce block_item_list:compound_statement
return ; }          }:term2 in compound_statement
             reduce compound_statementfunction_definition
             reduce function_definition:external_declaration
             reduce external_declaration:translation_unit
int                 shift INT:type_specifier
int              reduce type_specifier:declaration_specifiers
int myFunction                 shift IDENTIFIER:direct_declarator
int myFunction (          shift (:term2 in direct_declarator
int myFunction ( int                 shift INT:type_specifier
int myFunction ( int              reduce type_specifier:declaration_specifiers
int myFunction ( int arr                 shift IDENTIFIER:direct_declarator
int myFunction ( int arr [          shift [:term2 in direct_declarator
int myFunction ( int arr [ 10                 shift CONSTANT:primary_expression
int myFunction ( int arr [ 10 		reduce primary_expression:postfix_expression
int myFunction ( int arr [ 10              reduce postfix_expression:unary_expression
int myFunction ( int arr [ 10              reduce unary_expression:cast_expression
int myFunction ( int arr [ 10              reduce cast_expression:multiplicative_expression
int myFunction ( int arr [ 10              reduce multiplicative_expression:additive_expression
int myFunction ( int arr [ 10              reduce additive_expression:shift_expression
int myFunction ( int arr [ 10              reduce shift_expression:relational_expression
int myFunction ( int arr [ 10              reduce relational_expression:equality_expression
int myFunction ( int arr [ 10              reduce equality_expression:and_expression
int myFunction ( int arr [ 10              reduce and_expression:exclusive_or_expression
int myFunction ( int arr [ 10              reduce exclusive_or_expression:inclusive_or_expression
int myFunction ( int arr [ 10              reduce inclusive_or_expression:logical_and_expression
int myFunction ( int arr [ 10              reduce logical_and_expression:logical_or_expression
int myFunction ( int arr [ 10              reduce logical_or_expression:conditional_expression
int myFunction ( int arr [ 10 		reduce conditional_expression:assignment_expression
int myFunction ( int arr [ 10              reduce assignment_expression:direct_declarator
int myFunction ( int arr [ 10 ]          shift [:term2 in direct_declarator
int myFunction ( int arr [ 10 ]              reduce direct_declarator:declarator
int myFunction ( int arr [ 10 ]              reduce declarator:parameter_declaration
int myFunction ( int arr [ 10 ]              reduce  parameter_declaration:parameter_list
int myFunction ( int arr [ 10 ]              reduce parameter_list:parameter_type_list
int myFunction ( int arr [ 10 ]              reduce parameter_type_list:direct_declarator
int myFunction ( int arr [ 10 ] )          shift ):term4 in direct_declarator
int myFunction ( int arr [ 10 ] )              reduce direct_declarator:declarator
int myFunction ( int arr [ 10 ] ) {          {:term1 in compound_statement
char                 shift CHAR:type_specifier
char              reduce type_specifier:declaration_specifiers
char *          shift *:term1 in pointer
char * arr                 shift IDENTIFIER:direct_declarator
char * arr 		reduce direct_declarator:declarator
char * arr [          shift [:term2 in direct_declarator
char * arr [ 3                 shift CONSTANT:primary_expression
char * arr [ 3 		reduce primary_expression:postfix_expression
char * arr [ 3              reduce postfix_expression:unary_expression
char * arr [ 3              reduce unary_expression:cast_expression
char * arr [ 3              reduce cast_expression:multiplicative_expression
char * arr [ 3              reduce multiplicative_expression:additive_expression
char * arr [ 3              reduce additive_expression:shift_expression
char * arr [ 3              reduce shift_expression:relational_expression
char * arr [ 3              reduce relational_expression:equality_expression
char * arr [ 3              reduce equality_expression:and_expression
char * arr [ 3              reduce and_expression:exclusive_or_expression
char * arr [ 3              reduce exclusive_or_expression:inclusive_or_expression
char * arr [ 3              reduce inclusive_or_expression:logical_and_expression
char * arr [ 3              reduce logical_and_expression:logical_or_expression
char * arr [ 3              reduce logical_or_expression:conditional_expression
char * arr [ 3 		reduce conditional_expression:assignment_expression
char * arr [ 3              reduce assignment_expression:direct_declarator
char * arr [ 3 ]          shift [:term2 in direct_declarator
char * arr [ 3 ]              reduce direct_declarator:declarator
char * arr [ 3 ]              reduce declarator:init_declarator
char * arr [ 3 ] 		reduce init_declarator:init_declarator_list
char * arr [ 3 ]              reduce init_declarator_list:declaration
char * arr [ 3 ] ;                 ;:term3 in declaration
             reduce block_item:block_item
		reduce block_item:block_item_list
return                shift RETURN in jump_statement
return 0                 shift CONSTANT:primary_expression
return 0 		reduce primary_expression:postfix_expression
return 0              reduce postfix_expression:unary_expression
return 0              reduce unary_expression:cast_expression
return 0              reduce cast_expression:multiplicative_expression
return 0              reduce multiplicative_expression:additive_expression
return 0              reduce additive_expression:shift_expression
return 0              reduce shift_expression:relational_expression
return 0              reduce relational_expression:equality_expression
return 0              reduce equality_expression:and_expression
return 0              reduce and_expression:exclusive_or_expression
return 0              reduce exclusive_or_expression:inclusive_or_expression
return 0              reduce inclusive_or_expression:logical_and_expression
return 0              reduce logical_and_expression:logical_or_expression
return 0              reduce logical_or_expression:conditional_expression
return 0 		reduce conditional_expression:assignment_expression
return 0              reduce assignment_expression:expression
return 0              reduce expression:jump_statement
return 0 ;                shift ;:term2 in jump_statement
             reduce jump_statement:statement
             reduce statement:block_item
             reduce block_item:block_item_list
		reduce block_item_list:compound_statement
}          }:term2 in compound_statement
             reduce compound_statementfunction_definition
             reduce function_definition:external_declaration
             reduce external_declaration:translation_unit
